#pragma config(Sensor, S1,     Light,          sensorEV3_Color)
#pragma config(Motor,  motorB,          Left,          tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorC,          Right,         tmotorEV3_Large, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void moveStraight();
void turnRight1();
void turnRight2();
void turnLeft1();
void turnLeft2();
void detection();

int grid[7][9];
int rowCntr=1;
int colCntr=1;
int gridRows=0;
int gridCols=0;

task main()
{
	while(colCntr<10)
	{
		displayBigTextLine(4,"%d",colCntr);
		displayBigTextLine(6,"%d",rowCntr);
		for(rowCntr=1;rowCntr<7;rowCntr++)
		{
			detection();
			moveStraight();
			displayBigTextLine(6,"%d",rowCntr);
			gridRows++;
	
		if(rowCntr==6&&(colCntr==2||colCntr==4||colCntr==6||colCntr==8))
		{
			detection();
			turnRight1();
			moveStraight();
			turnRight2();
			colCntr++;
			gridCols++;
			gridRows=0;
		}
		else if(rowCntr==6)
		{
			detection();
			if(colCntr==9)
		{break;}
			turnLeft1();
			moveStraight();
			turnLeft2();
			colCntr++;
			gridCols++;
			gridRows=0;
		}
		/*displayBigTextLine(2,"%d %d %d %d %d %d %d",grid[0][0],grid[1][0],grid[2][0],grid[3][0],grid[4][0],grid[5][0],grid[6][0]);
		displayBigTextLine(4,"%d %d %d %d %d %d %d",grid[0][1],grid[1][1],grid[2][1],grid[3][1],grid[4][1],grid[5][1],grid[6][1]);
		displayBigTextLine(6,"%d %d %d %d %d %d %d",grid[0][2],grid[1][2],grid[2][2],grid[3][2],grid[4][2],grid[5][2],grid[6][2]);
		displayBigTextLine(8,"%d %d %d %d %d %d %d",grid[0][3],grid[1][3],grid[2][3],grid[3][3],grid[4][3],grid[5][3],grid[6][3]);
		displayBigTextLine(10,"%d %d %d %d %d %d %d",grid[0][4],grid[1][4],grid[2][4],grid[3][4],grid[4][4],grid[5][4],grid[6][4]);
		displayBigTextLine(12,"%d %d %d %d %d %d %d",grid[0][5],grid[1][5],grid[2][5],grid[3][5],grid[4][5],grid[5][5],grid[6][5]);
		displayBigTextLine(14,"%d %d %d %d %d %d %d",grid[0][6],grid[1][6],grid[2][6],grid[3][6],grid[4][6],grid[5][6],grid[6][6]);*/
		}
if(rowCntr==6&colCntr==9)
{
	break;
}
}

}



void moveStraight()
{
 	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB] < 300 && nMotorEncoder[motorC] < 300)
  {
  motor[motorB]=30;
  motor[motorC]=30;
	}
}

void turnRight1()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]< 175)
  {
  motor[motorB]=10;
  motor[motorC]=-10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;
 }

 void turnRight2()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]< 172)
  {
  motor[motorB]=10;
  motor[motorC]=-10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;
 }

void turnLeft1()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]> -175)
  {
  motor[motorB]=-10;
  motor[motorC]=10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;

 }

 void turnLeft2()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]> -172)
  {
  motor[motorB]=-10;
  motor[motorC]=10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;

 }
 
 void detection()
 {
   if(SensorValue(Light)>45)
			{
				grid[gridRows][gridCols]=1;
			}
			else
			{
				grid[gridRows][gridCols]=0;
			}
		}
