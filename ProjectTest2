#pragma config(Motor,  motorB,          Left,          tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorC,          Right,         tmotorEV3_Large, PIDControl, encoder)

void moveStraight();
void turnRight1();
void turnRight2();
void turnLeft1();
void turnLeft2();

int rowCntr=1;
int colCntr=1;

task main()
{
	while(colCntr<9)
	{
		displayBigTextLine(4,"%d",colCntr);
		displayBigTextLine(6,"%d",rowCntr);
		for(rowCntr=1;rowCntr<7;rowCntr++)
		{
		moveStraight();
		displayBigTextLine(6,"%d",rowCntr);
			
		if(rowCntr==6&&(colCntr==2||colCntr==4||colCntr==6||colCntr==8))
		{
			turnLeft1();
			moveStraight();
			turnLeft2();
			colCntr++;
		}
		else if(rowCntr==6)
		{
			turnRight1();
			moveStraight();
			turnRight2();
			colCntr++;
		}
		}
		
	}
}



void moveStraight()
{
 	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB] < 300 && nMotorEncoder[motorC] < 300)
  {
  motor[motorB]=30;
  motor[motorC]=30;
	}

}

void turnRight1()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]< 175)
  {
  motor[motorB]=10;
  motor[motorC]=-10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;
 }

 void turnRight2()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]< 172)
  {
  motor[motorB]=10;
  motor[motorC]=-10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;
 }
 
void turnLeft1()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]> -175)
  {
  motor[motorB]=-10;
  motor[motorC]=10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;

 }
 
 void turnLeft2()
{
	nMotorEncoder[motorB]=0;
  nMotorEncoder[motorC]=0;

  while(nMotorEncoder[motorB]> -172)
  {
  motor[motorB]=-10;
  motor[motorC]=10;
	}

	motor[motorB]=0;
  motor[motorC]=0 ;

 }
